// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieCharactersApi.Data;

#nullable disable

namespace MovieCharactersApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Tony Stark",
                            Gender = 0
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Pepper Potts",
                            Gender = 0
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Thor",
                            Gender = 0
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Loki",
                            Gender = 0
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Frodo Baggins",
                            Gender = 0
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Aragorn",
                            Gender = 0
                        });
                });

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.Franchise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Franchises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A franchise of superhero movies based on characters from Marvel Comics.",
                            Name = "Marvel Cinematic Universe"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A franchise of fantasy movies based on the books by J.R.R. Tolkien.",
                            Name = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A franchise of fantasy movies based on the books by J.K. Rowling.",
                            Name = "Harry Potter"
                        });
                });

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Director = "Jon Favreau",
                            FranchiseId = 1,
                            Genre = "Action, Adventure, Sci-Fi",
                            PictureUrl = "https://www.imdb.com/title/tt0371746/mediaviewer/rm4019253760/",
                            ReleaseYear = 2008,
                            Title = "Iron Man",
                            TrailerUrl = "https://www.youtube.com/watch?v=8hYlB38asDY"
                        },
                        new
                        {
                            Id = 2,
                            Director = "Kenneth Branagh",
                            FranchiseId = 1,
                            Genre = "Action, Adventure, Fantasy",
                            PictureUrl = "https://www.imdb.com/title/tt0800369/mediaviewer/rm4019253760/",
                            ReleaseYear = 2011,
                            Title = "Thor",
                            TrailerUrl = "https://www.youtube.com/watch?v=JOddp-nlNvQ"
                        },
                        new
                        {
                            Id = 3,
                            Director = "Peter Jackson",
                            FranchiseId = 2,
                            Genre = "Action, Adventure, Drama",
                            PictureUrl = "https://www.imdb.com/title/tt0167261/mediaviewer/rm4019253760/",
                            ReleaseYear = 2002,
                            Title = "The Lord of the Rings: The Two Towers",
                            TrailerUrl = "https://www.youtube.com/watch?v=LbfMDwc4azU"
                        });
                });

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.MovieCharacter", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCharacters");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            CharacterId = 2,
                            MovieId = 1
                        },
                        new
                        {
                            CharacterId = 3,
                            MovieId = 2
                        },
                        new
                        {
                            CharacterId = 4,
                            MovieId = 2
                        },
                        new
                        {
                            CharacterId = 5,
                            MovieId = 3
                        },
                        new
                        {
                            CharacterId = 6,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.Movie", b =>
                {
                    b.HasOne("MovieCharactersApi.Data.Entities.Franchise", "Franchise")
                        .WithMany("Movies")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.MovieCharacter", b =>
                {
                    b.HasOne("MovieCharactersApi.Data.Entities.Character", "Character")
                        .WithMany("MovieCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCharactersApi.Data.Entities.Movie", "Movie")
                        .WithMany("MovieCharacters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.Character", b =>
                {
                    b.Navigation("MovieCharacters");
                });

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.Franchise", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieCharactersApi.Data.Entities.Movie", b =>
                {
                    b.Navigation("MovieCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
